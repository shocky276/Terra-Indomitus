namespace = regency_events

###EVENT 1: Appoint Regent

regency_events.1 = {
	type = country_event
	title = "regency_events.1.t"
	desc = "regency_events.1.desc"
	picture = throneroom
	
	left_portrait = current_ruler
	right_portrait = scope:regency_consort
	right_portrait = scope:regency_family_head
	
	immediate = {
		random_character = {
			limit = {
				is_ruler = yes
			}
			save_scope_as = regency_true_ruler
		}
		random_character = {
			limit = {
				is_spouse_of = root.current_ruler
			}
			save_scope_as = regency_consort
		}
		random_character = {
			limit = {
				is_head_of_family = yes
				is_ruler = no
				is_adult = yes
			}
			save_scope_as = regency_family_head
		}
		
	}
	
	option = { # Consort Becomes Ruler
		name = "regency_events.1.a"
		trigger = {
			exists = scope:regency_consort
		}
		hidden_effect = {
			set_variable = {
				name = regency_government
			}
			add_country_modifier = {
				name = regency_government
				duration = -1
			}
			set_as_ruler = scope:regency_consort
			compensation_for_active_ideas_effect = yes
			if = {
				limit = {
					scope:regency_consort = {
						NOT = { has_same_family = scope:regency_true_ruler }
						is_minor_character = no
					}
				
				}
				scope:regency_consort = {
					set_as_minor_character = this
				}
			}
			scope:regency_consort = {
				set_family = scope:regency_true_ruler.family
				adapt_family_name = no
				set_home_country = ROOT
			}
			scope:regency_true_ruler = {
				add_loyalty = loyalty_regent_ruler
				add_character_modifier = {
					name = commander_king
					duration = -1
				}
			}
			if = {
				limit = {
					government = despotic_monarchy
				}
				change_government = regency_despotic_monarchy
				set_as_coruler = scope:regency_true_ruler
			}
			else_if = {
				limit = {
					government = aristocratic_monarchy
				}
				change_government = regency_aristocratic_monarchy
				set_as_coruler = scope:regency_true_ruler
			}
			else_if = {
				limit = {
					government = stratocratic_monarchy
				}
				change_government = regency_stratocratic_monarchy
				set_as_coruler = scope:regency_true_ruler
			}
			else_if = {
				limit = {
					government = theocratic_monarchy
				}
				change_government = regency_theocratic_monarchy
				set_as_coruler = scope:regency_true_ruler
			}
			else_if = {
				limit = {
					government = plutocratic_monarchy
				}
				change_government = regency_plutocratic_monarchy
				set_as_coruler = scope:regency_true_ruler
			}
			else_if = {
				limit = {
					government = imperium
				}
				change_government = regency_imperium
				set_as_coruler = scope:regency_true_ruler
			}
			else_if = {
				limit = {
					government = imperial_cult
				}
				change_government = regency_imperial_cult
				set_as_coruler = scope:regency_true_ruler
			}
			else_if = {
				limit = {
					government = dictatorship
				}
				change_government = regency_dictatorship
				set_as_coruler = scope:regency_true_ruler
			}
			else_if = {
				limit = {
					government = tanist_kingdom
				}
				change_government = regency_tanist_kingdom
				set_as_coruler = scope:regency_true_ruler
			}
			else_if = {
				limit = {
					government = tanist_empire
				}
				change_government = regency_tanist_empire
				set_as_coruler = scope:regency_true_ruler
			}
			calculate_succession_effect = yes
		}
	}
	
	option = {
		name = "regency_events.1.b"
		trigger = {
			exists = scope:regency_family_head
		}
		hidden_effect = {
			set_as_ruler = scope:regency_family_head
			set_variable = {
				name = regency_government
			}
			add_country_modifier = {
				name = regency_government
				duration = -1
			}
			scope:regency_true_ruler = {
				add_loyalty = loyalty_regent_ruler
				add_character_modifier = {
					name = commander_king
					duration = -1
				}
			}
			compensation_for_active_ideas_effect = yes
			if = {
				limit = {
					government = despotic_monarchy
				}
				change_government = regency_despotic_monarchy
				set_as_coruler = scope:regency_true_ruler
			}
			else_if = {
				limit = {
					government = aristocratic_monarchy
				}
				change_government = regency_aristocratic_monarchy
				set_as_coruler = scope:regency_true_ruler
			}
			else_if = {
				limit = {
					government = stratocratic_monarchy
				}
				change_government = regency_stratocratic_monarchy
				set_as_coruler = scope:regency_true_ruler
			}
			else_if = {
				limit = {
					government = theocratic_monarchy
				}
				change_government = regency_theocratic_monarchy
				set_as_coruler = scope:regency_true_ruler
			}
			else_if = {
				limit = {
					government = plutocratic_monarchy
				}
				change_government = regency_plutocratic_monarchy
				set_as_coruler = scope:regency_true_ruler
			}
			else_if = {
				limit = {
					government = imperium
				}
				change_government = regency_imperium
				set_as_coruler = scope:regency_true_ruler
			}
			else_if = {
				limit = {
					government = imperial_cult
				}
				change_government = regency_imperial_cult
				set_as_coruler = scope:regency_true_ruler
			}
			else_if = {
				limit = {
					government = dictatorship
				}
				change_government = regency_dictatorship
				set_as_coruler = scope:regency_true_ruler
			}
			else_if = {
				limit = {
					government = tanist_kingdom
				}
				change_government = regency_tanist_kingdom
				set_as_coruler = scope:regency_true_ruler
			}
			else_if = {
				limit = {
					government = tanist_empire
				}
				change_government = regency_tanist_empire
				set_as_coruler = scope:regency_true_ruler
			}
			calculate_succession_effect = yes
		}
	}
	
	option = {
		name = "regency_events.1.c"
	}

}

regency_events.2 = {

	type = country_event
	title = "regency_events.2.t"
	desc = "regency_events.2.desc"
	picture = throneroom
	
	left_portrait = scope:regent
	right_portrait = scope:regency_true_ruler
	
	immediate = {
		
		random_character = {
			limit = {
				is_ruler = yes
			}
			save_scope_as = regent
		}
		random_character = {
			limit = {
				has_character_modifier = commander_king
			}
			save_scope_as = regency_true_ruler
		}
		compensation_for_active_ideas_effect = yes
		remove_country_modifier = regency_government
		remove_variable = regency_government
		if = {
			limit = {
				government = regency_despotic_monarchy
			}
			change_government = despotic_monarchy
			set_as_ruler = scope:regency_true_ruler
		}
		else_if = {
			limit = {
				government = regency_aristocratic_monarchy
			}
			change_government = aristocratic_monarchy
			set_as_ruler = scope:regency_true_ruler
		}
		else_if = {
			limit = {
				government = regency_stratocratic_monarchy
			}
			change_government = stratocratic_monarchy
			set_as_ruler = scope:regency_true_ruler
		}
		else_if = {
			limit = {
				government = regency_theocratic_monarchy
			}
			change_government = theocratic_monarchy
			set_as_ruler = scope:regency_true_ruler
		}
		else_if = {
			limit = {
				government = regency_plutocratic_monarchy
			}
			change_government = plutocratic_monarchy
			set_as_ruler = scope:regency_true_ruler
		}
		else_if = {
			limit = {
				government = regency_imperium
			}
			change_government = imperium
			set_as_ruler = scope:regency_true_ruler
		}
		else_if = {
			limit = {
				government = regency_imperial_cult
			}
			change_government = imperial_cult
			set_as_ruler = scope:regency_true_ruler
		}
		else_if = {
			limit = {
				government = regency_dictatorship
			}
			change_government = dictatorship
			set_as_ruler = scope:regency_true_ruler
		}	
		else_if = {
			limit = {
				government = regency_tanist_kingdom
			}
			change_government = tanist_kingdom
			set_as_ruler = scope:regency_true_ruler
		}
		else_if = {
			limit = {
				government = regency_tanist_empire
			}
			change_government = tanist_empire
			set_as_ruler = scope:regency_true_ruler
		}
		scope:regency_true_ruler = {
			remove_character_modifier = commander_king
		}
		calculate_succession_effect = yes
	}
	
	option = {
		name = "regency_events.2.a"
	}
	
}

regency_events.3 = {
	type = country_event
	title = "regency_events.3.t"
	desc = "regency_events.3.desc"
	picture = throneroom
	
	left_portrait = scope:true_ruler
	right_portrait = scope:new_regent
	left_portrait = scope:former_regent
	

    immediate = {
		random_character = {
			limit = {
				has_character_modifier = commander_king
			}
			save_scope_as = true_ruler
		}
		calculate_succession_effect = yes
    }

    option = {
        name = regency_events.3.a 

    }	

}